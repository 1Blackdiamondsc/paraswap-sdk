/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers';
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from '@ethersproject/contracts';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';

interface PriceFeedInterface extends ethers.utils.Interface {
  functions: {
    'getBestPriceSimple(address,address,uint256)': FunctionFragment;
    'getBestPrice(address,address,uint256)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'getBestPriceSimple',
    values: [string, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getBestPrice',
    values: [string, string, BigNumberish],
  ): string;

  decodeFunctionResult(
    functionFragment: 'getBestPriceSimple',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getBestPrice',
    data: BytesLike,
  ): Result;

  events: {};
}

export class PriceFeed extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PriceFeedInterface;

  functions: {
    getBestPriceSimple(
      fromToken: string,
      toToken: string,
      srcAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber;
    }>;

    'getBestPriceSimple(address,address,uint256)'(
      fromToken: string,
      toToken: string,
      srcAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber;
    }>;

    getBestPrice(
      fromToken: string,
      toToken: string,
      srcAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      optimalRate: {
        rate: BigNumber;
        distribution: {
          Uniswap: BigNumber;
          Bancor: BigNumber;
          Kyber: BigNumber;
          Oasis: BigNumber;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: BigNumber;
        };
        0: BigNumber;
        1: {
          Uniswap: BigNumber;
          Bancor: BigNumber;
          Kyber: BigNumber;
          Oasis: BigNumber;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: BigNumber;
        };
      };
      0: {
        rate: BigNumber;
        distribution: {
          Uniswap: BigNumber;
          Bancor: BigNumber;
          Kyber: BigNumber;
          Oasis: BigNumber;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: BigNumber;
        };
        0: BigNumber;
        1: {
          Uniswap: BigNumber;
          Bancor: BigNumber;
          Kyber: BigNumber;
          Oasis: BigNumber;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: BigNumber;
        };
      };
    }>;

    'getBestPrice(address,address,uint256)'(
      fromToken: string,
      toToken: string,
      srcAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      optimalRate: {
        rate: BigNumber;
        distribution: {
          Uniswap: BigNumber;
          Bancor: BigNumber;
          Kyber: BigNumber;
          Oasis: BigNumber;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: BigNumber;
        };
        0: BigNumber;
        1: {
          Uniswap: BigNumber;
          Bancor: BigNumber;
          Kyber: BigNumber;
          Oasis: BigNumber;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: BigNumber;
        };
      };
      0: {
        rate: BigNumber;
        distribution: {
          Uniswap: BigNumber;
          Bancor: BigNumber;
          Kyber: BigNumber;
          Oasis: BigNumber;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: BigNumber;
        };
        0: BigNumber;
        1: {
          Uniswap: BigNumber;
          Bancor: BigNumber;
          Kyber: BigNumber;
          Oasis: BigNumber;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: BigNumber;
        };
      };
    }>;
  };

  getBestPriceSimple(
    fromToken: string,
    toToken: string,
    srcAmount: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'getBestPriceSimple(address,address,uint256)'(
    fromToken: string,
    toToken: string,
    srcAmount: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getBestPrice(
    fromToken: string,
    toToken: string,
    srcAmount: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<{
    rate: BigNumber;
    distribution: {
      Uniswap: BigNumber;
      Bancor: BigNumber;
      Kyber: BigNumber;
      Oasis: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    };
    0: BigNumber;
    1: {
      Uniswap: BigNumber;
      Bancor: BigNumber;
      Kyber: BigNumber;
      Oasis: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    };
  }>;

  'getBestPrice(address,address,uint256)'(
    fromToken: string,
    toToken: string,
    srcAmount: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<{
    rate: BigNumber;
    distribution: {
      Uniswap: BigNumber;
      Bancor: BigNumber;
      Kyber: BigNumber;
      Oasis: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    };
    0: BigNumber;
    1: {
      Uniswap: BigNumber;
      Bancor: BigNumber;
      Kyber: BigNumber;
      Oasis: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    };
  }>;

  callStatic: {
    getBestPriceSimple(
      fromToken: string,
      toToken: string,
      srcAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'getBestPriceSimple(address,address,uint256)'(
      fromToken: string,
      toToken: string,
      srcAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getBestPrice(
      fromToken: string,
      toToken: string,
      srcAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      rate: BigNumber;
      distribution: {
        Uniswap: BigNumber;
        Bancor: BigNumber;
        Kyber: BigNumber;
        Oasis: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
      };
      0: BigNumber;
      1: {
        Uniswap: BigNumber;
        Bancor: BigNumber;
        Kyber: BigNumber;
        Oasis: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
      };
    }>;

    'getBestPrice(address,address,uint256)'(
      fromToken: string,
      toToken: string,
      srcAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      rate: BigNumber;
      distribution: {
        Uniswap: BigNumber;
        Bancor: BigNumber;
        Kyber: BigNumber;
        Oasis: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
      };
      0: BigNumber;
      1: {
        Uniswap: BigNumber;
        Bancor: BigNumber;
        Kyber: BigNumber;
        Oasis: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
      };
    }>;
  };

  filters: {};

  estimateGas: {
    getBestPriceSimple(
      fromToken: string,
      toToken: string,
      srcAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'getBestPriceSimple(address,address,uint256)'(
      fromToken: string,
      toToken: string,
      srcAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getBestPrice(
      fromToken: string,
      toToken: string,
      srcAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'getBestPrice(address,address,uint256)'(
      fromToken: string,
      toToken: string,
      srcAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getBestPriceSimple(
      fromToken: string,
      toToken: string,
      srcAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'getBestPriceSimple(address,address,uint256)'(
      fromToken: string,
      toToken: string,
      srcAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getBestPrice(
      fromToken: string,
      toToken: string,
      srcAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'getBestPrice(address,address,uint256)'(
      fromToken: string,
      toToken: string,
      srcAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
