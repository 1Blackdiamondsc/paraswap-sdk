/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers';
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from '@ethersproject/contracts';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';

interface AugustusInterface extends ethers.utils.Interface {
  functions: {
    'buy(address,address,uint256,uint256,uint256,tuple[],uint256,address,uint256,string)': FunctionFragment;
    'changeGSTHolder(address)': FunctionFragment;
    'getFeeWallet()': FunctionFragment;
    'getPartnerRegistry()': FunctionFragment;
    'getTokenTransferProxy()': FunctionFragment;
    'getVersion()': FunctionFragment;
    'getWhitelistAddress()': FunctionFragment;
    'multiSwap(address,address,uint256,uint256,uint256,tuple[],uint256,address,uint256,string)': FunctionFragment;
    'owner()': FunctionFragment;
    'ownerTransferTokens(address,address,uint256)': FunctionFragment;
    'pause()': FunctionFragment;
    'paused()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setFeeWallet(address)': FunctionFragment;
    'setPartnerRegistry(address)': FunctionFragment;
    'setWhitelistAddress(address)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'unpause()': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'buy',
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      {
        exchange: string;
        targetExchange: string;
        fromAmount: BigNumberish;
        toAmount: BigNumberish;
        payload: BytesLike;
        networkFee: BigNumberish;
      }[],
      BigNumberish,
      string,
      BigNumberish,
      string,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'changeGSTHolder',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'getFeeWallet',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getPartnerRegistry',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getTokenTransferProxy',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getVersion',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getWhitelistAddress',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'multiSwap',
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      {
        to: string;
        totalNetworkFee: BigNumberish;
        routes: {
          exchange: string;
          targetExchange: string;
          percent: BigNumberish;
          payload: BytesLike;
          networkFee: BigNumberish;
        }[];
      }[],
      BigNumberish,
      string,
      BigNumberish,
      string,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'ownerTransferTokens',
    values: [string, string, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'setFeeWallet',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'setPartnerRegistry',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'setWhitelistAddress',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string],
  ): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'buy', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'changeGSTHolder',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getFeeWallet',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getPartnerRegistry',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getTokenTransferProxy',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'getVersion', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getWhitelistAddress',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'multiSwap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'ownerTransferTokens',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setFeeWallet',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setPartnerRegistry',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setWhitelistAddress',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;

  events: {
    'Bought(address,address,address,address,uint256,uint256,uint256,string)': EventFragment;
    'Donation(address,uint256)': EventFragment;
    'FeeTaken(uint256,uint256,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Paused()': EventFragment;
    'Swapped(address,address,address,address,uint256,uint256,uint256,string)': EventFragment;
    'Unpaused()': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Bought'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Donation'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FeeTaken'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Swapped'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
}

export class Augustus extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: AugustusInterface;

  functions: {
    buy(
      fromToken: string,
      toToken: string,
      fromAmount: BigNumberish,
      toAmount: BigNumberish,
      expectedAmount: BigNumberish,
      route: {
        exchange: string;
        targetExchange: string;
        fromAmount: BigNumberish;
        toAmount: BigNumberish;
        payload: BytesLike;
        networkFee: BigNumberish;
      }[],
      mintPrice: BigNumberish,
      beneficiary: string,
      donationBasisPoints: BigNumberish,
      referrer: string,
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>;

    'buy(address,address,uint256,uint256,uint256,tuple[],uint256,address,uint256,string)'(
      fromToken: string,
      toToken: string,
      fromAmount: BigNumberish,
      toAmount: BigNumberish,
      expectedAmount: BigNumberish,
      route: {
        exchange: string;
        targetExchange: string;
        fromAmount: BigNumberish;
        toAmount: BigNumberish;
        payload: BytesLike;
        networkFee: BigNumberish;
      }[],
      mintPrice: BigNumberish,
      beneficiary: string,
      donationBasisPoints: BigNumberish,
      referrer: string,
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>;

    changeGSTHolder(
      gstHolder: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'changeGSTHolder(address)'(
      gstHolder: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    getFeeWallet(
      overrides?: CallOverrides,
    ): Promise<{
      0: string;
    }>;

    'getFeeWallet()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: string;
    }>;

    getPartnerRegistry(
      overrides?: CallOverrides,
    ): Promise<{
      0: string;
    }>;

    'getPartnerRegistry()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: string;
    }>;

    getTokenTransferProxy(
      overrides?: CallOverrides,
    ): Promise<{
      0: string;
    }>;

    'getTokenTransferProxy()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: string;
    }>;

    getVersion(
      overrides?: CallOverrides,
    ): Promise<{
      0: string;
    }>;

    'getVersion()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: string;
    }>;

    getWhitelistAddress(
      overrides?: CallOverrides,
    ): Promise<{
      0: string;
    }>;

    'getWhitelistAddress()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: string;
    }>;

    multiSwap(
      fromToken: string,
      toToken: string,
      fromAmount: BigNumberish,
      toAmount: BigNumberish,
      expectedAmount: BigNumberish,
      path: {
        to: string;
        totalNetworkFee: BigNumberish;
        routes: {
          exchange: string;
          targetExchange: string;
          percent: BigNumberish;
          payload: BytesLike;
          networkFee: BigNumberish;
        }[];
      }[],
      mintPrice: BigNumberish,
      beneficiary: string,
      donationBasisPoints: BigNumberish,
      referrer: string,
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>;

    'multiSwap(address,address,uint256,uint256,uint256,tuple[],uint256,address,uint256,string)'(
      fromToken: string,
      toToken: string,
      fromAmount: BigNumberish,
      toAmount: BigNumberish,
      expectedAmount: BigNumberish,
      path: {
        to: string;
        totalNetworkFee: BigNumberish;
        routes: {
          exchange: string;
          targetExchange: string;
          percent: BigNumberish;
          payload: BytesLike;
          networkFee: BigNumberish;
        }[];
      }[],
      mintPrice: BigNumberish,
      beneficiary: string,
      donationBasisPoints: BigNumberish,
      referrer: string,
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>;

    owner(
      overrides?: CallOverrides,
    ): Promise<{
      0: string;
    }>;

    'owner()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: string;
    }>;

    ownerTransferTokens(
      token: string,
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'ownerTransferTokens(address,address,uint256)'(
      token: string,
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    pause(overrides?: Overrides): Promise<ContractTransaction>;

    'pause()'(overrides?: Overrides): Promise<ContractTransaction>;

    paused(
      overrides?: CallOverrides,
    ): Promise<{
      0: boolean;
    }>;

    'paused()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: boolean;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>;

    setFeeWallet(
      feeWallet: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'setFeeWallet(address)'(
      feeWallet: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    setPartnerRegistry(
      partnerRegistry: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'setPartnerRegistry(address)'(
      partnerRegistry: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    setWhitelistAddress(
      whitelisted: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'setWhitelistAddress(address)'(
      whitelisted: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    unpause(overrides?: Overrides): Promise<ContractTransaction>;

    'unpause()'(overrides?: Overrides): Promise<ContractTransaction>;
  };

  buy(
    fromToken: string,
    toToken: string,
    fromAmount: BigNumberish,
    toAmount: BigNumberish,
    expectedAmount: BigNumberish,
    route: {
      exchange: string;
      targetExchange: string;
      fromAmount: BigNumberish;
      toAmount: BigNumberish;
      payload: BytesLike;
      networkFee: BigNumberish;
    }[],
    mintPrice: BigNumberish,
    beneficiary: string,
    donationBasisPoints: BigNumberish,
    referrer: string,
    overrides?: PayableOverrides,
  ): Promise<ContractTransaction>;

  'buy(address,address,uint256,uint256,uint256,tuple[],uint256,address,uint256,string)'(
    fromToken: string,
    toToken: string,
    fromAmount: BigNumberish,
    toAmount: BigNumberish,
    expectedAmount: BigNumberish,
    route: {
      exchange: string;
      targetExchange: string;
      fromAmount: BigNumberish;
      toAmount: BigNumberish;
      payload: BytesLike;
      networkFee: BigNumberish;
    }[],
    mintPrice: BigNumberish,
    beneficiary: string,
    donationBasisPoints: BigNumberish,
    referrer: string,
    overrides?: PayableOverrides,
  ): Promise<ContractTransaction>;

  changeGSTHolder(
    gstHolder: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'changeGSTHolder(address)'(
    gstHolder: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  getFeeWallet(overrides?: CallOverrides): Promise<string>;

  'getFeeWallet()'(overrides?: CallOverrides): Promise<string>;

  getPartnerRegistry(overrides?: CallOverrides): Promise<string>;

  'getPartnerRegistry()'(overrides?: CallOverrides): Promise<string>;

  getTokenTransferProxy(overrides?: CallOverrides): Promise<string>;

  'getTokenTransferProxy()'(overrides?: CallOverrides): Promise<string>;

  getVersion(overrides?: CallOverrides): Promise<string>;

  'getVersion()'(overrides?: CallOverrides): Promise<string>;

  getWhitelistAddress(overrides?: CallOverrides): Promise<string>;

  'getWhitelistAddress()'(overrides?: CallOverrides): Promise<string>;

  multiSwap(
    fromToken: string,
    toToken: string,
    fromAmount: BigNumberish,
    toAmount: BigNumberish,
    expectedAmount: BigNumberish,
    path: {
      to: string;
      totalNetworkFee: BigNumberish;
      routes: {
        exchange: string;
        targetExchange: string;
        percent: BigNumberish;
        payload: BytesLike;
        networkFee: BigNumberish;
      }[];
    }[],
    mintPrice: BigNumberish,
    beneficiary: string,
    donationBasisPoints: BigNumberish,
    referrer: string,
    overrides?: PayableOverrides,
  ): Promise<ContractTransaction>;

  'multiSwap(address,address,uint256,uint256,uint256,tuple[],uint256,address,uint256,string)'(
    fromToken: string,
    toToken: string,
    fromAmount: BigNumberish,
    toAmount: BigNumberish,
    expectedAmount: BigNumberish,
    path: {
      to: string;
      totalNetworkFee: BigNumberish;
      routes: {
        exchange: string;
        targetExchange: string;
        percent: BigNumberish;
        payload: BytesLike;
        networkFee: BigNumberish;
      }[];
    }[],
    mintPrice: BigNumberish,
    beneficiary: string,
    donationBasisPoints: BigNumberish,
    referrer: string,
    overrides?: PayableOverrides,
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  'owner()'(overrides?: CallOverrides): Promise<string>;

  ownerTransferTokens(
    token: string,
    destination: string,
    amount: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'ownerTransferTokens(address,address,uint256)'(
    token: string,
    destination: string,
    amount: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  pause(overrides?: Overrides): Promise<ContractTransaction>;

  'pause()'(overrides?: Overrides): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  'paused()'(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>;

  setFeeWallet(
    feeWallet: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'setFeeWallet(address)'(
    feeWallet: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  setPartnerRegistry(
    partnerRegistry: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'setPartnerRegistry(address)'(
    partnerRegistry: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  setWhitelistAddress(
    whitelisted: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'setWhitelistAddress(address)'(
    whitelisted: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'transferOwnership(address)'(
    newOwner: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  unpause(overrides?: Overrides): Promise<ContractTransaction>;

  'unpause()'(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    buy(
      fromToken: string,
      toToken: string,
      fromAmount: BigNumberish,
      toAmount: BigNumberish,
      expectedAmount: BigNumberish,
      route: {
        exchange: string;
        targetExchange: string;
        fromAmount: BigNumberish;
        toAmount: BigNumberish;
        payload: BytesLike;
        networkFee: BigNumberish;
      }[],
      mintPrice: BigNumberish,
      beneficiary: string,
      donationBasisPoints: BigNumberish,
      referrer: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'buy(address,address,uint256,uint256,uint256,tuple[],uint256,address,uint256,string)'(
      fromToken: string,
      toToken: string,
      fromAmount: BigNumberish,
      toAmount: BigNumberish,
      expectedAmount: BigNumberish,
      route: {
        exchange: string;
        targetExchange: string;
        fromAmount: BigNumberish;
        toAmount: BigNumberish;
        payload: BytesLike;
        networkFee: BigNumberish;
      }[],
      mintPrice: BigNumberish,
      beneficiary: string,
      donationBasisPoints: BigNumberish,
      referrer: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    changeGSTHolder(
      gstHolder: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'changeGSTHolder(address)'(
      gstHolder: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    getFeeWallet(overrides?: CallOverrides): Promise<string>;

    'getFeeWallet()'(overrides?: CallOverrides): Promise<string>;

    getPartnerRegistry(overrides?: CallOverrides): Promise<string>;

    'getPartnerRegistry()'(overrides?: CallOverrides): Promise<string>;

    getTokenTransferProxy(overrides?: CallOverrides): Promise<string>;

    'getTokenTransferProxy()'(overrides?: CallOverrides): Promise<string>;

    getVersion(overrides?: CallOverrides): Promise<string>;

    'getVersion()'(overrides?: CallOverrides): Promise<string>;

    getWhitelistAddress(overrides?: CallOverrides): Promise<string>;

    'getWhitelistAddress()'(overrides?: CallOverrides): Promise<string>;

    multiSwap(
      fromToken: string,
      toToken: string,
      fromAmount: BigNumberish,
      toAmount: BigNumberish,
      expectedAmount: BigNumberish,
      path: {
        to: string;
        totalNetworkFee: BigNumberish;
        routes: {
          exchange: string;
          targetExchange: string;
          percent: BigNumberish;
          payload: BytesLike;
          networkFee: BigNumberish;
        }[];
      }[],
      mintPrice: BigNumberish,
      beneficiary: string,
      donationBasisPoints: BigNumberish,
      referrer: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'multiSwap(address,address,uint256,uint256,uint256,tuple[],uint256,address,uint256,string)'(
      fromToken: string,
      toToken: string,
      fromAmount: BigNumberish,
      toAmount: BigNumberish,
      expectedAmount: BigNumberish,
      path: {
        to: string;
        totalNetworkFee: BigNumberish;
        routes: {
          exchange: string;
          targetExchange: string;
          percent: BigNumberish;
          payload: BytesLike;
          networkFee: BigNumberish;
        }[];
      }[],
      mintPrice: BigNumberish,
      beneficiary: string,
      donationBasisPoints: BigNumberish,
      referrer: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    'owner()'(overrides?: CallOverrides): Promise<string>;

    ownerTransferTokens(
      token: string,
      destination: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'ownerTransferTokens(address,address,uint256)'(
      token: string,
      destination: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    'pause()'(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    'paused()'(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    'renounceOwnership()'(overrides?: CallOverrides): Promise<void>;

    setFeeWallet(feeWallet: string, overrides?: CallOverrides): Promise<void>;

    'setFeeWallet(address)'(
      feeWallet: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setPartnerRegistry(
      partnerRegistry: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'setPartnerRegistry(address)'(
      partnerRegistry: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setWhitelistAddress(
      whitelisted: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'setWhitelistAddress(address)'(
      whitelisted: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    'unpause()'(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    Bought(
      initiator: null,
      beneficiary: string | null,
      srcToken: string | null,
      destToken: string | null,
      srcAmount: null,
      receivedAmount: null,
      expectedAmount: null,
      referrer: null,
    ): EventFilter;

    Donation(receiver: string | null, donationBasisPoints: null): EventFilter;

    FeeTaken(fee: null, partnerShare: null, paraswapShare: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null,
    ): EventFilter;

    Paused(): EventFilter;

    Swapped(
      initiator: null,
      beneficiary: string | null,
      srcToken: string | null,
      destToken: string | null,
      srcAmount: null,
      receivedAmount: null,
      expectedAmount: null,
      referrer: null,
    ): EventFilter;

    Unpaused(): EventFilter;
  };

  estimateGas: {
    buy(
      fromToken: string,
      toToken: string,
      fromAmount: BigNumberish,
      toAmount: BigNumberish,
      expectedAmount: BigNumberish,
      route: {
        exchange: string;
        targetExchange: string;
        fromAmount: BigNumberish;
        toAmount: BigNumberish;
        payload: BytesLike;
        networkFee: BigNumberish;
      }[],
      mintPrice: BigNumberish,
      beneficiary: string,
      donationBasisPoints: BigNumberish,
      referrer: string,
      overrides?: PayableOverrides,
    ): Promise<BigNumber>;

    'buy(address,address,uint256,uint256,uint256,tuple[],uint256,address,uint256,string)'(
      fromToken: string,
      toToken: string,
      fromAmount: BigNumberish,
      toAmount: BigNumberish,
      expectedAmount: BigNumberish,
      route: {
        exchange: string;
        targetExchange: string;
        fromAmount: BigNumberish;
        toAmount: BigNumberish;
        payload: BytesLike;
        networkFee: BigNumberish;
      }[],
      mintPrice: BigNumberish,
      beneficiary: string,
      donationBasisPoints: BigNumberish,
      referrer: string,
      overrides?: PayableOverrides,
    ): Promise<BigNumber>;

    changeGSTHolder(
      gstHolder: string,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    'changeGSTHolder(address)'(
      gstHolder: string,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    getFeeWallet(overrides?: CallOverrides): Promise<BigNumber>;

    'getFeeWallet()'(overrides?: CallOverrides): Promise<BigNumber>;

    getPartnerRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    'getPartnerRegistry()'(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenTransferProxy(overrides?: CallOverrides): Promise<BigNumber>;

    'getTokenTransferProxy()'(overrides?: CallOverrides): Promise<BigNumber>;

    getVersion(overrides?: CallOverrides): Promise<BigNumber>;

    'getVersion()'(overrides?: CallOverrides): Promise<BigNumber>;

    getWhitelistAddress(overrides?: CallOverrides): Promise<BigNumber>;

    'getWhitelistAddress()'(overrides?: CallOverrides): Promise<BigNumber>;

    multiSwap(
      fromToken: string,
      toToken: string,
      fromAmount: BigNumberish,
      toAmount: BigNumberish,
      expectedAmount: BigNumberish,
      path: {
        to: string;
        totalNetworkFee: BigNumberish;
        routes: {
          exchange: string;
          targetExchange: string;
          percent: BigNumberish;
          payload: BytesLike;
          networkFee: BigNumberish;
        }[];
      }[],
      mintPrice: BigNumberish,
      beneficiary: string,
      donationBasisPoints: BigNumberish,
      referrer: string,
      overrides?: PayableOverrides,
    ): Promise<BigNumber>;

    'multiSwap(address,address,uint256,uint256,uint256,tuple[],uint256,address,uint256,string)'(
      fromToken: string,
      toToken: string,
      fromAmount: BigNumberish,
      toAmount: BigNumberish,
      expectedAmount: BigNumberish,
      path: {
        to: string;
        totalNetworkFee: BigNumberish;
        routes: {
          exchange: string;
          targetExchange: string;
          percent: BigNumberish;
          payload: BytesLike;
          networkFee: BigNumberish;
        }[];
      }[],
      mintPrice: BigNumberish,
      beneficiary: string,
      donationBasisPoints: BigNumberish,
      referrer: string,
      overrides?: PayableOverrides,
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>;

    ownerTransferTokens(
      token: string,
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    'ownerTransferTokens(address,address,uint256)'(
      token: string,
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    pause(overrides?: Overrides): Promise<BigNumber>;

    'pause()'(overrides?: Overrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    'paused()'(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    'renounceOwnership()'(overrides?: Overrides): Promise<BigNumber>;

    setFeeWallet(feeWallet: string, overrides?: Overrides): Promise<BigNumber>;

    'setFeeWallet(address)'(
      feeWallet: string,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    setPartnerRegistry(
      partnerRegistry: string,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    'setPartnerRegistry(address)'(
      partnerRegistry: string,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    setWhitelistAddress(
      whitelisted: string,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    'setWhitelistAddress(address)'(
      whitelisted: string,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides): Promise<BigNumber>;

    'unpause()'(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    buy(
      fromToken: string,
      toToken: string,
      fromAmount: BigNumberish,
      toAmount: BigNumberish,
      expectedAmount: BigNumberish,
      route: {
        exchange: string;
        targetExchange: string;
        fromAmount: BigNumberish;
        toAmount: BigNumberish;
        payload: BytesLike;
        networkFee: BigNumberish;
      }[],
      mintPrice: BigNumberish,
      beneficiary: string,
      donationBasisPoints: BigNumberish,
      referrer: string,
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>;

    'buy(address,address,uint256,uint256,uint256,tuple[],uint256,address,uint256,string)'(
      fromToken: string,
      toToken: string,
      fromAmount: BigNumberish,
      toAmount: BigNumberish,
      expectedAmount: BigNumberish,
      route: {
        exchange: string;
        targetExchange: string;
        fromAmount: BigNumberish;
        toAmount: BigNumberish;
        payload: BytesLike;
        networkFee: BigNumberish;
      }[],
      mintPrice: BigNumberish,
      beneficiary: string,
      donationBasisPoints: BigNumberish,
      referrer: string,
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>;

    changeGSTHolder(
      gstHolder: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'changeGSTHolder(address)'(
      gstHolder: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    getFeeWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getFeeWallet()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPartnerRegistry(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'getPartnerRegistry()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getTokenTransferProxy(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'getTokenTransferProxy()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getVersion()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWhitelistAddress(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'getWhitelistAddress()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    multiSwap(
      fromToken: string,
      toToken: string,
      fromAmount: BigNumberish,
      toAmount: BigNumberish,
      expectedAmount: BigNumberish,
      path: {
        to: string;
        totalNetworkFee: BigNumberish;
        routes: {
          exchange: string;
          targetExchange: string;
          percent: BigNumberish;
          payload: BytesLike;
          networkFee: BigNumberish;
        }[];
      }[],
      mintPrice: BigNumberish,
      beneficiary: string,
      donationBasisPoints: BigNumberish,
      referrer: string,
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>;

    'multiSwap(address,address,uint256,uint256,uint256,tuple[],uint256,address,uint256,string)'(
      fromToken: string,
      toToken: string,
      fromAmount: BigNumberish,
      toAmount: BigNumberish,
      expectedAmount: BigNumberish,
      path: {
        to: string;
        totalNetworkFee: BigNumberish;
        routes: {
          exchange: string;
          targetExchange: string;
          percent: BigNumberish;
          payload: BytesLike;
          networkFee: BigNumberish;
        }[];
      }[],
      mintPrice: BigNumberish,
      beneficiary: string,
      donationBasisPoints: BigNumberish,
      referrer: string,
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerTransferTokens(
      token: string,
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'ownerTransferTokens(address,address,uint256)'(
      token: string,
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides): Promise<PopulatedTransaction>;

    'pause()'(overrides?: Overrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'paused()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    'renounceOwnership()'(overrides?: Overrides): Promise<PopulatedTransaction>;

    setFeeWallet(
      feeWallet: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'setFeeWallet(address)'(
      feeWallet: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    setPartnerRegistry(
      partnerRegistry: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'setPartnerRegistry(address)'(
      partnerRegistry: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    setWhitelistAddress(
      whitelisted: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'setWhitelistAddress(address)'(
      whitelisted: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides): Promise<PopulatedTransaction>;

    'unpause()'(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
