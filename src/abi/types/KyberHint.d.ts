/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers';
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from '@ethersproject/contracts';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';

interface KyberHintInterface extends ethers.utils.Interface {
  functions: {
    'addAlerter(address)': FunctionFragment;
    'addOperator(address)': FunctionFragment;
    'admin()': FunctionFragment;
    'buildEthToTokenHint(address,uint8,bytes32[],uint256[])': FunctionFragment;
    'buildTokenToEthHint(address,uint8,bytes32[],uint256[])': FunctionFragment;
    'buildTokenToTokenHint(address,uint8,bytes32[],uint256[],address,uint8,bytes32[],uint256[])': FunctionFragment;
    'claimAdmin()': FunctionFragment;
    'doMatch(address,address,uint256[],uint256[],uint256[])': FunctionFragment;
    'getAlerters()': FunctionFragment;
    'getNegligibleRateDiffBps()': FunctionFragment;
    'getOperators()': FunctionFragment;
    'getTradingReserves(address,address,bool,bytes)': FunctionFragment;
    'kyberNetwork()': FunctionFragment;
    'kyberStorage()': FunctionFragment;
    'parseEthToTokenHint(address,bytes)': FunctionFragment;
    'parseTokenToEthHint(address,bytes)': FunctionFragment;
    'parseTokenToTokenHint(address,address,bytes)': FunctionFragment;
    'pendingAdmin()': FunctionFragment;
    'removeAlerter(address)': FunctionFragment;
    'removeOperator(address)': FunctionFragment;
    'setKyberStorage(address)': FunctionFragment;
    'setNegligibleRateDiffBps(uint256)': FunctionFragment;
    'setNetworkContract(address)': FunctionFragment;
    'transferAdmin(address)': FunctionFragment;
    'transferAdminQuickly(address)': FunctionFragment;
    'withdrawEther(uint256,address)': FunctionFragment;
    'withdrawToken(address,uint256,address)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'addAlerter', values: [string]): string;
  encodeFunctionData(functionFragment: 'addOperator', values: [string]): string;
  encodeFunctionData(functionFragment: 'admin', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'buildEthToTokenHint',
    values: [string, BigNumberish, BytesLike[], BigNumberish[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'buildTokenToEthHint',
    values: [string, BigNumberish, BytesLike[], BigNumberish[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'buildTokenToTokenHint',
    values: [
      string,
      BigNumberish,
      BytesLike[],
      BigNumberish[],
      string,
      BigNumberish,
      BytesLike[],
      BigNumberish[],
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'claimAdmin',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'doMatch',
    values: [string, string, BigNumberish[], BigNumberish[], BigNumberish[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'getAlerters',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getNegligibleRateDiffBps',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getOperators',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getTradingReserves',
    values: [string, string, boolean, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'kyberNetwork',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'kyberStorage',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'parseEthToTokenHint',
    values: [string, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'parseTokenToEthHint',
    values: [string, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'parseTokenToTokenHint',
    values: [string, string, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'pendingAdmin',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'removeAlerter',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'removeOperator',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'setKyberStorage',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'setNegligibleRateDiffBps',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setNetworkContract',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferAdmin',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferAdminQuickly',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawEther',
    values: [BigNumberish, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawToken',
    values: [string, BigNumberish, string],
  ): string;

  decodeFunctionResult(functionFragment: 'addAlerter', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'addOperator',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'admin', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'buildEthToTokenHint',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'buildTokenToEthHint',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'buildTokenToTokenHint',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'claimAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'doMatch', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getAlerters',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getNegligibleRateDiffBps',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getOperators',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getTradingReserves',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'kyberNetwork',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'kyberStorage',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'parseEthToTokenHint',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'parseTokenToEthHint',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'parseTokenToTokenHint',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'pendingAdmin',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'removeAlerter',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'removeOperator',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setKyberStorage',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setNegligibleRateDiffBps',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setNetworkContract',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferAdmin',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferAdminQuickly',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'withdrawEther',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'withdrawToken',
    data: BytesLike,
  ): Result;

  events: {
    'AdminClaimed(address,address)': EventFragment;
    'AlerterAdded(address,bool)': EventFragment;
    'EtherWithdraw(uint256,address)': EventFragment;
    'KyberNetworkUpdated(address)': EventFragment;
    'KyberStorageUpdated(address)': EventFragment;
    'OperatorAdded(address,bool)': EventFragment;
    'TokenWithdraw(address,uint256,address)': EventFragment;
    'TransferAdminPending(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AdminClaimed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AlerterAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EtherWithdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'KyberNetworkUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'KyberStorageUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OperatorAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokenWithdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TransferAdminPending'): EventFragment;
}

export class KyberHint extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: KyberHintInterface;

  functions: {
    addAlerter(
      newAlerter: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'addAlerter(address)'(
      newAlerter: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    addOperator(
      newOperator: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'addOperator(address)'(
      newOperator: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    admin(
      overrides?: CallOverrides,
    ): Promise<{
      0: string;
    }>;

    'admin()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: string;
    }>;

    buildEthToTokenHint(
      tokenDest: string,
      ethToTokenType: BigNumberish,
      ethToTokenReserveIds: BytesLike[],
      ethToTokenSplits: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<{
      hint: string;
      0: string;
    }>;

    'buildEthToTokenHint(address,uint8,bytes32[],uint256[])'(
      tokenDest: string,
      ethToTokenType: BigNumberish,
      ethToTokenReserveIds: BytesLike[],
      ethToTokenSplits: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<{
      hint: string;
      0: string;
    }>;

    buildTokenToEthHint(
      tokenSrc: string,
      tokenToEthType: BigNumberish,
      tokenToEthReserveIds: BytesLike[],
      tokenToEthSplits: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<{
      hint: string;
      0: string;
    }>;

    'buildTokenToEthHint(address,uint8,bytes32[],uint256[])'(
      tokenSrc: string,
      tokenToEthType: BigNumberish,
      tokenToEthReserveIds: BytesLike[],
      tokenToEthSplits: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<{
      hint: string;
      0: string;
    }>;

    buildTokenToTokenHint(
      tokenSrc: string,
      tokenToEthType: BigNumberish,
      tokenToEthReserveIds: BytesLike[],
      tokenToEthSplits: BigNumberish[],
      tokenDest: string,
      ethToTokenType: BigNumberish,
      ethToTokenReserveIds: BytesLike[],
      ethToTokenSplits: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<{
      hint: string;
      0: string;
    }>;

    'buildTokenToTokenHint(address,uint8,bytes32[],uint256[],address,uint8,bytes32[],uint256[])'(
      tokenSrc: string,
      tokenToEthType: BigNumberish,
      tokenToEthReserveIds: BytesLike[],
      tokenToEthSplits: BigNumberish[],
      tokenDest: string,
      ethToTokenType: BigNumberish,
      ethToTokenReserveIds: BytesLike[],
      ethToTokenSplits: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<{
      hint: string;
      0: string;
    }>;

    claimAdmin(overrides?: Overrides): Promise<ContractTransaction>;

    'claimAdmin()'(overrides?: Overrides): Promise<ContractTransaction>;

    doMatch(
      src: string,
      dest: string,
      srcAmounts: BigNumberish[],
      feesAccountedDestBps: BigNumberish[],
      rates: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<{
      reserveIndexes: BigNumber[];
      0: BigNumber[];
    }>;

    'doMatch(address,address,uint256[],uint256[],uint256[])'(
      src: string,
      dest: string,
      srcAmounts: BigNumberish[],
      feesAccountedDestBps: BigNumberish[],
      rates: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<{
      reserveIndexes: BigNumber[];
      0: BigNumber[];
    }>;

    getAlerters(
      overrides?: CallOverrides,
    ): Promise<{
      0: string[];
    }>;

    'getAlerters()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: string[];
    }>;

    getNegligibleRateDiffBps(
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber;
    }>;

    'getNegligibleRateDiffBps()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber;
    }>;

    getOperators(
      overrides?: CallOverrides,
    ): Promise<{
      0: string[];
    }>;

    'getOperators()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: string[];
    }>;

    getTradingReserves(
      src: string,
      dest: string,
      isTokenToToken: boolean,
      hint: BytesLike,
      overrides?: CallOverrides,
    ): Promise<{
      reserveIds: string[];
      splitValuesBps: BigNumber[];
      processWithRate: number;
      0: string[];
      1: BigNumber[];
      2: number;
    }>;

    'getTradingReserves(address,address,bool,bytes)'(
      src: string,
      dest: string,
      isTokenToToken: boolean,
      hint: BytesLike,
      overrides?: CallOverrides,
    ): Promise<{
      reserveIds: string[];
      splitValuesBps: BigNumber[];
      processWithRate: number;
      0: string[];
      1: BigNumber[];
      2: number;
    }>;

    kyberNetwork(
      overrides?: CallOverrides,
    ): Promise<{
      0: string;
    }>;

    'kyberNetwork()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: string;
    }>;

    kyberStorage(
      overrides?: CallOverrides,
    ): Promise<{
      0: string;
    }>;

    'kyberStorage()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: string;
    }>;

    parseEthToTokenHint(
      tokenDest: string,
      hint: BytesLike,
      overrides?: CallOverrides,
    ): Promise<{
      ethToTokenType: number;
      ethToTokenReserveIds: string[];
      ethToTokenAddresses: string[];
      ethToTokenSplits: BigNumber[];
      0: number;
      1: string[];
      2: string[];
      3: BigNumber[];
    }>;

    'parseEthToTokenHint(address,bytes)'(
      tokenDest: string,
      hint: BytesLike,
      overrides?: CallOverrides,
    ): Promise<{
      ethToTokenType: number;
      ethToTokenReserveIds: string[];
      ethToTokenAddresses: string[];
      ethToTokenSplits: BigNumber[];
      0: number;
      1: string[];
      2: string[];
      3: BigNumber[];
    }>;

    parseTokenToEthHint(
      tokenSrc: string,
      hint: BytesLike,
      overrides?: CallOverrides,
    ): Promise<{
      tokenToEthType: number;
      tokenToEthReserveIds: string[];
      tokenToEthAddresses: string[];
      tokenToEthSplits: BigNumber[];
      0: number;
      1: string[];
      2: string[];
      3: BigNumber[];
    }>;

    'parseTokenToEthHint(address,bytes)'(
      tokenSrc: string,
      hint: BytesLike,
      overrides?: CallOverrides,
    ): Promise<{
      tokenToEthType: number;
      tokenToEthReserveIds: string[];
      tokenToEthAddresses: string[];
      tokenToEthSplits: BigNumber[];
      0: number;
      1: string[];
      2: string[];
      3: BigNumber[];
    }>;

    parseTokenToTokenHint(
      tokenSrc: string,
      tokenDest: string,
      hint: BytesLike,
      overrides?: CallOverrides,
    ): Promise<{
      tokenToEthType: number;
      tokenToEthReserveIds: string[];
      tokenToEthAddresses: string[];
      tokenToEthSplits: BigNumber[];
      ethToTokenType: number;
      ethToTokenReserveIds: string[];
      ethToTokenAddresses: string[];
      ethToTokenSplits: BigNumber[];
      0: number;
      1: string[];
      2: string[];
      3: BigNumber[];
      4: number;
      5: string[];
      6: string[];
      7: BigNumber[];
    }>;

    'parseTokenToTokenHint(address,address,bytes)'(
      tokenSrc: string,
      tokenDest: string,
      hint: BytesLike,
      overrides?: CallOverrides,
    ): Promise<{
      tokenToEthType: number;
      tokenToEthReserveIds: string[];
      tokenToEthAddresses: string[];
      tokenToEthSplits: BigNumber[];
      ethToTokenType: number;
      ethToTokenReserveIds: string[];
      ethToTokenAddresses: string[];
      ethToTokenSplits: BigNumber[];
      0: number;
      1: string[];
      2: string[];
      3: BigNumber[];
      4: number;
      5: string[];
      6: string[];
      7: BigNumber[];
    }>;

    pendingAdmin(
      overrides?: CallOverrides,
    ): Promise<{
      0: string;
    }>;

    'pendingAdmin()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: string;
    }>;

    removeAlerter(
      alerter: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'removeAlerter(address)'(
      alerter: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    removeOperator(
      operator: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'removeOperator(address)'(
      operator: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    setKyberStorage(
      _kyberStorage: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'setKyberStorage(address)'(
      _kyberStorage: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    setNegligibleRateDiffBps(
      _negligibleRateDiffBps: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'setNegligibleRateDiffBps(uint256)'(
      _negligibleRateDiffBps: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    setNetworkContract(
      _kyberNetwork: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'setNetworkContract(address)'(
      _kyberNetwork: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    transferAdmin(
      newAdmin: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'transferAdmin(address)'(
      newAdmin: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    transferAdminQuickly(
      newAdmin: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'transferAdminQuickly(address)'(
      newAdmin: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    withdrawEther(
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'withdrawEther(uint256,address)'(
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    withdrawToken(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'withdrawToken(address,uint256,address)'(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;
  };

  addAlerter(
    newAlerter: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'addAlerter(address)'(
    newAlerter: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  addOperator(
    newOperator: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'addOperator(address)'(
    newOperator: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  'admin()'(overrides?: CallOverrides): Promise<string>;

  buildEthToTokenHint(
    tokenDest: string,
    ethToTokenType: BigNumberish,
    ethToTokenReserveIds: BytesLike[],
    ethToTokenSplits: BigNumberish[],
    overrides?: CallOverrides,
  ): Promise<string>;

  'buildEthToTokenHint(address,uint8,bytes32[],uint256[])'(
    tokenDest: string,
    ethToTokenType: BigNumberish,
    ethToTokenReserveIds: BytesLike[],
    ethToTokenSplits: BigNumberish[],
    overrides?: CallOverrides,
  ): Promise<string>;

  buildTokenToEthHint(
    tokenSrc: string,
    tokenToEthType: BigNumberish,
    tokenToEthReserveIds: BytesLike[],
    tokenToEthSplits: BigNumberish[],
    overrides?: CallOverrides,
  ): Promise<string>;

  'buildTokenToEthHint(address,uint8,bytes32[],uint256[])'(
    tokenSrc: string,
    tokenToEthType: BigNumberish,
    tokenToEthReserveIds: BytesLike[],
    tokenToEthSplits: BigNumberish[],
    overrides?: CallOverrides,
  ): Promise<string>;

  buildTokenToTokenHint(
    tokenSrc: string,
    tokenToEthType: BigNumberish,
    tokenToEthReserveIds: BytesLike[],
    tokenToEthSplits: BigNumberish[],
    tokenDest: string,
    ethToTokenType: BigNumberish,
    ethToTokenReserveIds: BytesLike[],
    ethToTokenSplits: BigNumberish[],
    overrides?: CallOverrides,
  ): Promise<string>;

  'buildTokenToTokenHint(address,uint8,bytes32[],uint256[],address,uint8,bytes32[],uint256[])'(
    tokenSrc: string,
    tokenToEthType: BigNumberish,
    tokenToEthReserveIds: BytesLike[],
    tokenToEthSplits: BigNumberish[],
    tokenDest: string,
    ethToTokenType: BigNumberish,
    ethToTokenReserveIds: BytesLike[],
    ethToTokenSplits: BigNumberish[],
    overrides?: CallOverrides,
  ): Promise<string>;

  claimAdmin(overrides?: Overrides): Promise<ContractTransaction>;

  'claimAdmin()'(overrides?: Overrides): Promise<ContractTransaction>;

  doMatch(
    src: string,
    dest: string,
    srcAmounts: BigNumberish[],
    feesAccountedDestBps: BigNumberish[],
    rates: BigNumberish[],
    overrides?: CallOverrides,
  ): Promise<BigNumber[]>;

  'doMatch(address,address,uint256[],uint256[],uint256[])'(
    src: string,
    dest: string,
    srcAmounts: BigNumberish[],
    feesAccountedDestBps: BigNumberish[],
    rates: BigNumberish[],
    overrides?: CallOverrides,
  ): Promise<BigNumber[]>;

  getAlerters(overrides?: CallOverrides): Promise<string[]>;

  'getAlerters()'(overrides?: CallOverrides): Promise<string[]>;

  getNegligibleRateDiffBps(overrides?: CallOverrides): Promise<BigNumber>;

  'getNegligibleRateDiffBps()'(overrides?: CallOverrides): Promise<BigNumber>;

  getOperators(overrides?: CallOverrides): Promise<string[]>;

  'getOperators()'(overrides?: CallOverrides): Promise<string[]>;

  getTradingReserves(
    src: string,
    dest: string,
    isTokenToToken: boolean,
    hint: BytesLike,
    overrides?: CallOverrides,
  ): Promise<{
    reserveIds: string[];
    splitValuesBps: BigNumber[];
    processWithRate: number;
    0: string[];
    1: BigNumber[];
    2: number;
  }>;

  'getTradingReserves(address,address,bool,bytes)'(
    src: string,
    dest: string,
    isTokenToToken: boolean,
    hint: BytesLike,
    overrides?: CallOverrides,
  ): Promise<{
    reserveIds: string[];
    splitValuesBps: BigNumber[];
    processWithRate: number;
    0: string[];
    1: BigNumber[];
    2: number;
  }>;

  kyberNetwork(overrides?: CallOverrides): Promise<string>;

  'kyberNetwork()'(overrides?: CallOverrides): Promise<string>;

  kyberStorage(overrides?: CallOverrides): Promise<string>;

  'kyberStorage()'(overrides?: CallOverrides): Promise<string>;

  parseEthToTokenHint(
    tokenDest: string,
    hint: BytesLike,
    overrides?: CallOverrides,
  ): Promise<{
    ethToTokenType: number;
    ethToTokenReserveIds: string[];
    ethToTokenAddresses: string[];
    ethToTokenSplits: BigNumber[];
    0: number;
    1: string[];
    2: string[];
    3: BigNumber[];
  }>;

  'parseEthToTokenHint(address,bytes)'(
    tokenDest: string,
    hint: BytesLike,
    overrides?: CallOverrides,
  ): Promise<{
    ethToTokenType: number;
    ethToTokenReserveIds: string[];
    ethToTokenAddresses: string[];
    ethToTokenSplits: BigNumber[];
    0: number;
    1: string[];
    2: string[];
    3: BigNumber[];
  }>;

  parseTokenToEthHint(
    tokenSrc: string,
    hint: BytesLike,
    overrides?: CallOverrides,
  ): Promise<{
    tokenToEthType: number;
    tokenToEthReserveIds: string[];
    tokenToEthAddresses: string[];
    tokenToEthSplits: BigNumber[];
    0: number;
    1: string[];
    2: string[];
    3: BigNumber[];
  }>;

  'parseTokenToEthHint(address,bytes)'(
    tokenSrc: string,
    hint: BytesLike,
    overrides?: CallOverrides,
  ): Promise<{
    tokenToEthType: number;
    tokenToEthReserveIds: string[];
    tokenToEthAddresses: string[];
    tokenToEthSplits: BigNumber[];
    0: number;
    1: string[];
    2: string[];
    3: BigNumber[];
  }>;

  parseTokenToTokenHint(
    tokenSrc: string,
    tokenDest: string,
    hint: BytesLike,
    overrides?: CallOverrides,
  ): Promise<{
    tokenToEthType: number;
    tokenToEthReserveIds: string[];
    tokenToEthAddresses: string[];
    tokenToEthSplits: BigNumber[];
    ethToTokenType: number;
    ethToTokenReserveIds: string[];
    ethToTokenAddresses: string[];
    ethToTokenSplits: BigNumber[];
    0: number;
    1: string[];
    2: string[];
    3: BigNumber[];
    4: number;
    5: string[];
    6: string[];
    7: BigNumber[];
  }>;

  'parseTokenToTokenHint(address,address,bytes)'(
    tokenSrc: string,
    tokenDest: string,
    hint: BytesLike,
    overrides?: CallOverrides,
  ): Promise<{
    tokenToEthType: number;
    tokenToEthReserveIds: string[];
    tokenToEthAddresses: string[];
    tokenToEthSplits: BigNumber[];
    ethToTokenType: number;
    ethToTokenReserveIds: string[];
    ethToTokenAddresses: string[];
    ethToTokenSplits: BigNumber[];
    0: number;
    1: string[];
    2: string[];
    3: BigNumber[];
    4: number;
    5: string[];
    6: string[];
    7: BigNumber[];
  }>;

  pendingAdmin(overrides?: CallOverrides): Promise<string>;

  'pendingAdmin()'(overrides?: CallOverrides): Promise<string>;

  removeAlerter(
    alerter: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'removeAlerter(address)'(
    alerter: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  removeOperator(
    operator: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'removeOperator(address)'(
    operator: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  setKyberStorage(
    _kyberStorage: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'setKyberStorage(address)'(
    _kyberStorage: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  setNegligibleRateDiffBps(
    _negligibleRateDiffBps: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'setNegligibleRateDiffBps(uint256)'(
    _negligibleRateDiffBps: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  setNetworkContract(
    _kyberNetwork: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'setNetworkContract(address)'(
    _kyberNetwork: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  transferAdmin(
    newAdmin: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'transferAdmin(address)'(
    newAdmin: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  transferAdminQuickly(
    newAdmin: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'transferAdminQuickly(address)'(
    newAdmin: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  withdrawEther(
    amount: BigNumberish,
    sendTo: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'withdrawEther(uint256,address)'(
    amount: BigNumberish,
    sendTo: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  withdrawToken(
    token: string,
    amount: BigNumberish,
    sendTo: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'withdrawToken(address,uint256,address)'(
    token: string,
    amount: BigNumberish,
    sendTo: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  callStatic: {
    addAlerter(newAlerter: string, overrides?: CallOverrides): Promise<void>;

    'addAlerter(address)'(
      newAlerter: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    addOperator(newOperator: string, overrides?: CallOverrides): Promise<void>;

    'addOperator(address)'(
      newOperator: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    'admin()'(overrides?: CallOverrides): Promise<string>;

    buildEthToTokenHint(
      tokenDest: string,
      ethToTokenType: BigNumberish,
      ethToTokenReserveIds: BytesLike[],
      ethToTokenSplits: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<string>;

    'buildEthToTokenHint(address,uint8,bytes32[],uint256[])'(
      tokenDest: string,
      ethToTokenType: BigNumberish,
      ethToTokenReserveIds: BytesLike[],
      ethToTokenSplits: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<string>;

    buildTokenToEthHint(
      tokenSrc: string,
      tokenToEthType: BigNumberish,
      tokenToEthReserveIds: BytesLike[],
      tokenToEthSplits: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<string>;

    'buildTokenToEthHint(address,uint8,bytes32[],uint256[])'(
      tokenSrc: string,
      tokenToEthType: BigNumberish,
      tokenToEthReserveIds: BytesLike[],
      tokenToEthSplits: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<string>;

    buildTokenToTokenHint(
      tokenSrc: string,
      tokenToEthType: BigNumberish,
      tokenToEthReserveIds: BytesLike[],
      tokenToEthSplits: BigNumberish[],
      tokenDest: string,
      ethToTokenType: BigNumberish,
      ethToTokenReserveIds: BytesLike[],
      ethToTokenSplits: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<string>;

    'buildTokenToTokenHint(address,uint8,bytes32[],uint256[],address,uint8,bytes32[],uint256[])'(
      tokenSrc: string,
      tokenToEthType: BigNumberish,
      tokenToEthReserveIds: BytesLike[],
      tokenToEthSplits: BigNumberish[],
      tokenDest: string,
      ethToTokenType: BigNumberish,
      ethToTokenReserveIds: BytesLike[],
      ethToTokenSplits: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<string>;

    claimAdmin(overrides?: CallOverrides): Promise<void>;

    'claimAdmin()'(overrides?: CallOverrides): Promise<void>;

    doMatch(
      src: string,
      dest: string,
      srcAmounts: BigNumberish[],
      feesAccountedDestBps: BigNumberish[],
      rates: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>;

    'doMatch(address,address,uint256[],uint256[],uint256[])'(
      src: string,
      dest: string,
      srcAmounts: BigNumberish[],
      feesAccountedDestBps: BigNumberish[],
      rates: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>;

    getAlerters(overrides?: CallOverrides): Promise<string[]>;

    'getAlerters()'(overrides?: CallOverrides): Promise<string[]>;

    getNegligibleRateDiffBps(overrides?: CallOverrides): Promise<BigNumber>;

    'getNegligibleRateDiffBps()'(overrides?: CallOverrides): Promise<BigNumber>;

    getOperators(overrides?: CallOverrides): Promise<string[]>;

    'getOperators()'(overrides?: CallOverrides): Promise<string[]>;

    getTradingReserves(
      src: string,
      dest: string,
      isTokenToToken: boolean,
      hint: BytesLike,
      overrides?: CallOverrides,
    ): Promise<{
      reserveIds: string[];
      splitValuesBps: BigNumber[];
      processWithRate: number;
      0: string[];
      1: BigNumber[];
      2: number;
    }>;

    'getTradingReserves(address,address,bool,bytes)'(
      src: string,
      dest: string,
      isTokenToToken: boolean,
      hint: BytesLike,
      overrides?: CallOverrides,
    ): Promise<{
      reserveIds: string[];
      splitValuesBps: BigNumber[];
      processWithRate: number;
      0: string[];
      1: BigNumber[];
      2: number;
    }>;

    kyberNetwork(overrides?: CallOverrides): Promise<string>;

    'kyberNetwork()'(overrides?: CallOverrides): Promise<string>;

    kyberStorage(overrides?: CallOverrides): Promise<string>;

    'kyberStorage()'(overrides?: CallOverrides): Promise<string>;

    parseEthToTokenHint(
      tokenDest: string,
      hint: BytesLike,
      overrides?: CallOverrides,
    ): Promise<{
      ethToTokenType: number;
      ethToTokenReserveIds: string[];
      ethToTokenAddresses: string[];
      ethToTokenSplits: BigNumber[];
      0: number;
      1: string[];
      2: string[];
      3: BigNumber[];
    }>;

    'parseEthToTokenHint(address,bytes)'(
      tokenDest: string,
      hint: BytesLike,
      overrides?: CallOverrides,
    ): Promise<{
      ethToTokenType: number;
      ethToTokenReserveIds: string[];
      ethToTokenAddresses: string[];
      ethToTokenSplits: BigNumber[];
      0: number;
      1: string[];
      2: string[];
      3: BigNumber[];
    }>;

    parseTokenToEthHint(
      tokenSrc: string,
      hint: BytesLike,
      overrides?: CallOverrides,
    ): Promise<{
      tokenToEthType: number;
      tokenToEthReserveIds: string[];
      tokenToEthAddresses: string[];
      tokenToEthSplits: BigNumber[];
      0: number;
      1: string[];
      2: string[];
      3: BigNumber[];
    }>;

    'parseTokenToEthHint(address,bytes)'(
      tokenSrc: string,
      hint: BytesLike,
      overrides?: CallOverrides,
    ): Promise<{
      tokenToEthType: number;
      tokenToEthReserveIds: string[];
      tokenToEthAddresses: string[];
      tokenToEthSplits: BigNumber[];
      0: number;
      1: string[];
      2: string[];
      3: BigNumber[];
    }>;

    parseTokenToTokenHint(
      tokenSrc: string,
      tokenDest: string,
      hint: BytesLike,
      overrides?: CallOverrides,
    ): Promise<{
      tokenToEthType: number;
      tokenToEthReserveIds: string[];
      tokenToEthAddresses: string[];
      tokenToEthSplits: BigNumber[];
      ethToTokenType: number;
      ethToTokenReserveIds: string[];
      ethToTokenAddresses: string[];
      ethToTokenSplits: BigNumber[];
      0: number;
      1: string[];
      2: string[];
      3: BigNumber[];
      4: number;
      5: string[];
      6: string[];
      7: BigNumber[];
    }>;

    'parseTokenToTokenHint(address,address,bytes)'(
      tokenSrc: string,
      tokenDest: string,
      hint: BytesLike,
      overrides?: CallOverrides,
    ): Promise<{
      tokenToEthType: number;
      tokenToEthReserveIds: string[];
      tokenToEthAddresses: string[];
      tokenToEthSplits: BigNumber[];
      ethToTokenType: number;
      ethToTokenReserveIds: string[];
      ethToTokenAddresses: string[];
      ethToTokenSplits: BigNumber[];
      0: number;
      1: string[];
      2: string[];
      3: BigNumber[];
      4: number;
      5: string[];
      6: string[];
      7: BigNumber[];
    }>;

    pendingAdmin(overrides?: CallOverrides): Promise<string>;

    'pendingAdmin()'(overrides?: CallOverrides): Promise<string>;

    removeAlerter(alerter: string, overrides?: CallOverrides): Promise<void>;

    'removeAlerter(address)'(
      alerter: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    removeOperator(operator: string, overrides?: CallOverrides): Promise<void>;

    'removeOperator(address)'(
      operator: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setKyberStorage(
      _kyberStorage: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'setKyberStorage(address)'(
      _kyberStorage: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setNegligibleRateDiffBps(
      _negligibleRateDiffBps: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'setNegligibleRateDiffBps(uint256)'(
      _negligibleRateDiffBps: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setNetworkContract(
      _kyberNetwork: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'setNetworkContract(address)'(
      _kyberNetwork: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    transferAdmin(newAdmin: string, overrides?: CallOverrides): Promise<void>;

    'transferAdmin(address)'(
      newAdmin: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    transferAdminQuickly(
      newAdmin: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'transferAdminQuickly(address)'(
      newAdmin: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    withdrawEther(
      amount: BigNumberish,
      sendTo: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'withdrawEther(uint256,address)'(
      amount: BigNumberish,
      sendTo: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    withdrawToken(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'withdrawToken(address,uint256,address)'(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    AdminClaimed(newAdmin: null, previousAdmin: null): EventFilter;

    AlerterAdded(newAlerter: null, isAdd: null): EventFilter;

    EtherWithdraw(amount: null, sendTo: null): EventFilter;

    KyberNetworkUpdated(newKyberNetwork: null): EventFilter;

    KyberStorageUpdated(newKyberStorage: null): EventFilter;

    OperatorAdded(newOperator: null, isAdd: null): EventFilter;

    TokenWithdraw(token: null, amount: null, sendTo: null): EventFilter;

    TransferAdminPending(pendingAdmin: null): EventFilter;
  };

  estimateGas: {
    addAlerter(newAlerter: string, overrides?: Overrides): Promise<BigNumber>;

    'addAlerter(address)'(
      newAlerter: string,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    addOperator(newOperator: string, overrides?: Overrides): Promise<BigNumber>;

    'addOperator(address)'(
      newOperator: string,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    'admin()'(overrides?: CallOverrides): Promise<BigNumber>;

    buildEthToTokenHint(
      tokenDest: string,
      ethToTokenType: BigNumberish,
      ethToTokenReserveIds: BytesLike[],
      ethToTokenSplits: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'buildEthToTokenHint(address,uint8,bytes32[],uint256[])'(
      tokenDest: string,
      ethToTokenType: BigNumberish,
      ethToTokenReserveIds: BytesLike[],
      ethToTokenSplits: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    buildTokenToEthHint(
      tokenSrc: string,
      tokenToEthType: BigNumberish,
      tokenToEthReserveIds: BytesLike[],
      tokenToEthSplits: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'buildTokenToEthHint(address,uint8,bytes32[],uint256[])'(
      tokenSrc: string,
      tokenToEthType: BigNumberish,
      tokenToEthReserveIds: BytesLike[],
      tokenToEthSplits: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    buildTokenToTokenHint(
      tokenSrc: string,
      tokenToEthType: BigNumberish,
      tokenToEthReserveIds: BytesLike[],
      tokenToEthSplits: BigNumberish[],
      tokenDest: string,
      ethToTokenType: BigNumberish,
      ethToTokenReserveIds: BytesLike[],
      ethToTokenSplits: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'buildTokenToTokenHint(address,uint8,bytes32[],uint256[],address,uint8,bytes32[],uint256[])'(
      tokenSrc: string,
      tokenToEthType: BigNumberish,
      tokenToEthReserveIds: BytesLike[],
      tokenToEthSplits: BigNumberish[],
      tokenDest: string,
      ethToTokenType: BigNumberish,
      ethToTokenReserveIds: BytesLike[],
      ethToTokenSplits: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    claimAdmin(overrides?: Overrides): Promise<BigNumber>;

    'claimAdmin()'(overrides?: Overrides): Promise<BigNumber>;

    doMatch(
      src: string,
      dest: string,
      srcAmounts: BigNumberish[],
      feesAccountedDestBps: BigNumberish[],
      rates: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'doMatch(address,address,uint256[],uint256[],uint256[])'(
      src: string,
      dest: string,
      srcAmounts: BigNumberish[],
      feesAccountedDestBps: BigNumberish[],
      rates: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getAlerters(overrides?: CallOverrides): Promise<BigNumber>;

    'getAlerters()'(overrides?: CallOverrides): Promise<BigNumber>;

    getNegligibleRateDiffBps(overrides?: CallOverrides): Promise<BigNumber>;

    'getNegligibleRateDiffBps()'(overrides?: CallOverrides): Promise<BigNumber>;

    getOperators(overrides?: CallOverrides): Promise<BigNumber>;

    'getOperators()'(overrides?: CallOverrides): Promise<BigNumber>;

    getTradingReserves(
      src: string,
      dest: string,
      isTokenToToken: boolean,
      hint: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'getTradingReserves(address,address,bool,bytes)'(
      src: string,
      dest: string,
      isTokenToToken: boolean,
      hint: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    kyberNetwork(overrides?: CallOverrides): Promise<BigNumber>;

    'kyberNetwork()'(overrides?: CallOverrides): Promise<BigNumber>;

    kyberStorage(overrides?: CallOverrides): Promise<BigNumber>;

    'kyberStorage()'(overrides?: CallOverrides): Promise<BigNumber>;

    parseEthToTokenHint(
      tokenDest: string,
      hint: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'parseEthToTokenHint(address,bytes)'(
      tokenDest: string,
      hint: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    parseTokenToEthHint(
      tokenSrc: string,
      hint: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'parseTokenToEthHint(address,bytes)'(
      tokenSrc: string,
      hint: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    parseTokenToTokenHint(
      tokenSrc: string,
      tokenDest: string,
      hint: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'parseTokenToTokenHint(address,address,bytes)'(
      tokenSrc: string,
      tokenDest: string,
      hint: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    pendingAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    'pendingAdmin()'(overrides?: CallOverrides): Promise<BigNumber>;

    removeAlerter(alerter: string, overrides?: Overrides): Promise<BigNumber>;

    'removeAlerter(address)'(
      alerter: string,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    removeOperator(operator: string, overrides?: Overrides): Promise<BigNumber>;

    'removeOperator(address)'(
      operator: string,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    setKyberStorage(
      _kyberStorage: string,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    'setKyberStorage(address)'(
      _kyberStorage: string,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    setNegligibleRateDiffBps(
      _negligibleRateDiffBps: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    'setNegligibleRateDiffBps(uint256)'(
      _negligibleRateDiffBps: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    setNetworkContract(
      _kyberNetwork: string,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    'setNetworkContract(address)'(
      _kyberNetwork: string,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    transferAdmin(newAdmin: string, overrides?: Overrides): Promise<BigNumber>;

    'transferAdmin(address)'(
      newAdmin: string,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    transferAdminQuickly(
      newAdmin: string,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    'transferAdminQuickly(address)'(
      newAdmin: string,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    withdrawEther(
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    'withdrawEther(uint256,address)'(
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    withdrawToken(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    'withdrawToken(address,uint256,address)'(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAlerter(
      newAlerter: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'addAlerter(address)'(
      newAlerter: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    addOperator(
      newOperator: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'addOperator(address)'(
      newOperator: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'admin()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buildEthToTokenHint(
      tokenDest: string,
      ethToTokenType: BigNumberish,
      ethToTokenReserveIds: BytesLike[],
      ethToTokenSplits: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'buildEthToTokenHint(address,uint8,bytes32[],uint256[])'(
      tokenDest: string,
      ethToTokenType: BigNumberish,
      ethToTokenReserveIds: BytesLike[],
      ethToTokenSplits: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    buildTokenToEthHint(
      tokenSrc: string,
      tokenToEthType: BigNumberish,
      tokenToEthReserveIds: BytesLike[],
      tokenToEthSplits: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'buildTokenToEthHint(address,uint8,bytes32[],uint256[])'(
      tokenSrc: string,
      tokenToEthType: BigNumberish,
      tokenToEthReserveIds: BytesLike[],
      tokenToEthSplits: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    buildTokenToTokenHint(
      tokenSrc: string,
      tokenToEthType: BigNumberish,
      tokenToEthReserveIds: BytesLike[],
      tokenToEthSplits: BigNumberish[],
      tokenDest: string,
      ethToTokenType: BigNumberish,
      ethToTokenReserveIds: BytesLike[],
      ethToTokenSplits: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'buildTokenToTokenHint(address,uint8,bytes32[],uint256[],address,uint8,bytes32[],uint256[])'(
      tokenSrc: string,
      tokenToEthType: BigNumberish,
      tokenToEthReserveIds: BytesLike[],
      tokenToEthSplits: BigNumberish[],
      tokenDest: string,
      ethToTokenType: BigNumberish,
      ethToTokenReserveIds: BytesLike[],
      ethToTokenSplits: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    claimAdmin(overrides?: Overrides): Promise<PopulatedTransaction>;

    'claimAdmin()'(overrides?: Overrides): Promise<PopulatedTransaction>;

    doMatch(
      src: string,
      dest: string,
      srcAmounts: BigNumberish[],
      feesAccountedDestBps: BigNumberish[],
      rates: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'doMatch(address,address,uint256[],uint256[],uint256[])'(
      src: string,
      dest: string,
      srcAmounts: BigNumberish[],
      feesAccountedDestBps: BigNumberish[],
      rates: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getAlerters(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getAlerters()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNegligibleRateDiffBps(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'getNegligibleRateDiffBps()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getOperators(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getOperators()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTradingReserves(
      src: string,
      dest: string,
      isTokenToToken: boolean,
      hint: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'getTradingReserves(address,address,bool,bytes)'(
      src: string,
      dest: string,
      isTokenToToken: boolean,
      hint: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    kyberNetwork(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'kyberNetwork()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kyberStorage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'kyberStorage()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    parseEthToTokenHint(
      tokenDest: string,
      hint: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'parseEthToTokenHint(address,bytes)'(
      tokenDest: string,
      hint: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    parseTokenToEthHint(
      tokenSrc: string,
      hint: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'parseTokenToEthHint(address,bytes)'(
      tokenSrc: string,
      hint: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    parseTokenToTokenHint(
      tokenSrc: string,
      tokenDest: string,
      hint: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'parseTokenToTokenHint(address,address,bytes)'(
      tokenSrc: string,
      tokenDest: string,
      hint: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    pendingAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'pendingAdmin()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeAlerter(
      alerter: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'removeAlerter(address)'(
      alerter: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    removeOperator(
      operator: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'removeOperator(address)'(
      operator: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    setKyberStorage(
      _kyberStorage: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'setKyberStorage(address)'(
      _kyberStorage: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    setNegligibleRateDiffBps(
      _negligibleRateDiffBps: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'setNegligibleRateDiffBps(uint256)'(
      _negligibleRateDiffBps: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    setNetworkContract(
      _kyberNetwork: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'setNetworkContract(address)'(
      _kyberNetwork: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    transferAdmin(
      newAdmin: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'transferAdmin(address)'(
      newAdmin: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    transferAdminQuickly(
      newAdmin: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'transferAdminQuickly(address)'(
      newAdmin: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    withdrawEther(
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'withdrawEther(uint256,address)'(
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    withdrawToken(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'withdrawToken(address,uint256,address)'(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;
  };
}
